import pygame
import sys
from copy import deepcopy, copy


class Board:
    # создание поля
    def __init__(self, width, height):
        self.width = width
        self.height = height
        self.board = [[0 for x in range(self.width)] for y in range(self.height)]
        # значения по умолчанию
        self.left = 10
        self.top = 10
        self.cell_size = 30
        self.player = 0

    # настройка внешнего вида
    def set_view(self, left, top, cell_size):
        self.left = left
        self.top = top
        self.cell_size = cell_size

    def render(self, screen):
        self.screen = screen
        self.screen.fill((0, 0, 0))
        for i in range(self.height):
            for j in range(self.width):
                if self.board[i][j] == 0:
                    pygame.draw.rect(self.screen, (255, 255, 255), (self.left + self.cell_size * j, self.top + self.cell_size * i, self.cell_size, self.cell_size), width=1)
                    pygame.draw.rect(self.screen, (0, 0, 0), (self.left + self.cell_size * j + 1, self.top + self.cell_size * i + 1, self.cell_size - 2, self.cell_size - 2))

                elif self.board[i][j] == 1:
                    pygame.draw.rect(self.screen, (255, 255, 255), (self.left + self.cell_size * j, self.top + self.cell_size * i, self.cell_size, self.cell_size), width=1)
                    pygame.draw.rect(self.screen, (0, 255, 0), (self.left + self.cell_size * j + 1, self.top + self.cell_size * i + 1, self.cell_size - 2, self.cell_size - 2))

    def get_click(self, mouse_pos):
        cell = self.get_cell(mouse_pos)
        if cell:
            self.on_click(cell)

    def on_click(self, cell):
        self.board[cell[0]][cell[1]] = 1

    def get_cell(self, mouse_pos):
        for i in range(self.height):
            for j in range(self.width):
                if self.left + self.cell_size * j < mouse_pos[0] < self.left + self.cell_size * j + self.cell_size and\
                   self.top + self.cell_size * i < mouse_pos[1] < self.top + self.cell_size * i + self.cell_size:
                    return (i, j)

    def get_size(self):
        return (self.width * self.cell_size, self.height * self.cell_size)

    def get_coords(self):
        return (self.left, self.top)


class Game_Life(Board):
    def __init__(self, width, height):
        super().__init__(width, height)

    def next_step(self):

        new = deepcopy(self.board)
        for y in range(self.height):
            for x in range(self.width):
                s = 0
                for dy in range(-1, 2):
                    for dx in range(-1, 2):
                        s += self.board[(y + dy)%self.height][(x + dx)%self.width]
                s -= self.board[y][x]
                if s == 3 and self.board[y][x] == 0:
                    new[y][x] = 1
                elif self.board[y][x] == 1 and (s < 2 or s > 3):
                    new[y][x] = 0

        self.board = deepcopy(new)


def main():
    pygame.init()
    board = Game_Life(30, 20)
    board.set_view(10, 10, 25)
    size = width, height = board.get_coords()[0] * 2 + board.get_size()[0], board.get_coords()[1] * 2 + board.get_size()[1]
    screen = pygame.display.set_mode(size)
    x_pos = 0
    game = False
    clock = pygame.time.Clock()
    ticks = 0
    speed = 5
    screen.fill(pygame.Color('Black'))
    running = True
    while running:

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            if event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
                board.get_click(event.pos)
            if (event.type == (pygame.KEYDOWN) and pygame.K_SPACE) or\
               (event.type == (pygame.MOUSEBUTTONDOWN) and event.button == 3):
                game = not game
                speed = 5
            if event.type == (pygame.MOUSEBUTTONDOWN) and event.button == 4:
                speed += 1
            if event.type == (pygame.MOUSEBUTTONDOWN) and event.button == 5:
                if speed > 0:
                    speed -= 1

        if game:
            clock.tick(1 + speed)
            board.next_step()

        board.render(screen)
        pygame.display.flip()

    pygame.quit()


if __name__ == '__main__':
    sys.exit(main())
